class Solution {
    
    const int INF = 1e5 + 10;
    int m, n;
    
    vector <pair <int, int> > movements = {
	{0, 1}, {0, -1}, {1, 0}, {-1, 0}
};

bool isValid(int i , int j) {
	return i >= 0 && j >= 0 && i < m && j < n;
}

    void bfs(vector <vector<int>>& res, vector <vector<int>>& grid){
        
        vector <vector<int>> vis(m,(vector<int>(n, 0)));
        
        queue <pair<int, int>> q;
        
        for(int i = 0; i < m; ++i){
            for(int j = 0; j < n; ++j){
                if(grid[i][j] == 0){
                    vis[i][j] = 1;
                    res[i][j] = 0;
                    q.push({i, j});
                }
            }
        }
        
        while(!q.empty()){
            auto v = q.front();
            int v_x = v.first;
            int v_y = v.second;
            q.pop();
            for(auto movement : movements) {
    			int child_x = movement.first + v_x;
    			int child_y = movement.second + v_y;
    			if(!isValid(child_x, child_y))
    				continue;
    			if(vis[child_x][child_y])
    				continue;
    			q.push({child_x , child_y});
    			res[child_x][child_y] = res[v_x][v_y] + 1;
    			vis[child_x][child_y] = 1;
    		}
        }
    }
    
public:
    
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        
        m = mat.size();
	    n = mat[0].size();
	    
	    vector <vector<int>> res(m,(vector<int>(n, INF)));
	    
	    bfs(res, mat);
	    
	    return res;
        
    }
};
