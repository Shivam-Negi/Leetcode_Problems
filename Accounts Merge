class DisjointSet {
	vector <int> size, parent;
public:
	DisjointSet(int n){
		size.resize(n+1, 1);
		parent.resize(n+1);
		for(int i = 0; i < n; ++i){
			parent[i] = i;
		}
	}

	int find_U_par(int node){
		if(node == parent[node])
			return node;

		return parent[node] = find_U_par(parent[node]);
	}

	void unionBySize(int u, int v){
		int ulp_u = find_U_par(u);    // ultimate parent finding
		int ulp_v = find_U_par(v);

		if(ulp_u == ulp_v)     // already connected
			return;

		if(size[ulp_u] < size[ulp_v]){
			parent[ulp_u] = ulp_v;
			size[ulp_v] += size[ulp_u];
		}
		else{
			parent[ulp_v] = ulp_u;
			size[ulp_u] += size[ulp_v];
		}
	}
};

class Solution {
public:
    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {
        int n = accounts.size();
        DisjointSet ds(n);
        unordered_map <string, int> mailNode;    //  mail, node

        // connecting nodes and making disjoint set
        for(int i = 0; i < n; ++i){
            for(int j = 1; j < accounts[i].size(); ++j){
                string mail = accounts[i][j]; 
                if(mailNode.find(mail) == mailNode.end())
                    mailNode[mail] = i;
                else
                    ds.unionBySize(i, mailNode[mail]);
            }
        }
        // merging mails acc to disjoint set
        vector <string> mergeMail[n];
        for(auto it : mailNode){
            string mail = it.first;
            int node = ds.find_U_par(it.second);
            mergeMail[node].push_back(mail);
        }
        // rearranging the mails 
        vector<vector<string>> ans;
        for(int i = 0; i < n; ++i){
            if(mergeMail[i].size() == 0)
                continue;
            sort(mergeMail[i].begin(), mergeMail[i].end());
            vector <string> temp;
            temp.push_back(accounts[i][0]);         //  first insert the name
            for(auto it : mergeMail[i]){            //  pushing sorted mails
                temp.push_back(it);
            }
            ans.push_back(temp);
        }
        return ans;
    }
};
