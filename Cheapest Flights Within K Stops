class Solution {
    
    vector <pair<int, int>> g[1000];  // < node, cost >
    
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        
        for(auto it : flights){
            g[it[0]].push_back({it[1], it[2]});
        }
        vector <int> cost(n, 1e9);
        cost[src] = 0;
        queue <pair<int, pair<int, int>> > q;      // < stops, { node, cost } >
        
        q.push({0, {src, 0}});
        while(!q.empty()){
            auto it = q.front();
            int stops = it.first;
            int node = it.second.first;
            int cost_node = it.second.second;
            q.pop();
            
            if(stops > k)
                continue;
                
            for(auto child : g[node]){
                int child_node = child.first;
                int child_cost = child.second;
                
                if(cost_node + child_cost < cost[child_node] && stops <= k){
                    cost[child_node] = cost_node + child_cost;
                    q.push({stops + 1, {child_node, cost[child_node]}});
                }
            }
        }
        if(cost[dst] == 1e9)
            return -1;
            
        return cost[dst];
    }
};
