topo sort Bfs..

class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        
        int V = graph.size();
        
        // reversing the edges...
        vector<int> adjRev[V];
        
        vector<int> indegree(V, 0);
        for(int i = 0; i < V; ++i){
            //  i -> it
            //  it -> i
            for(auto it : graph[i]){
                adjRev[it].push_back(i);
                indegree[i]++;
            }
        }
        
        queue<int> q;
        for(int i = 0; i < V; ++i){
            if(indegree[i] == 0)
                q.push(i);
        }
        
        vector<int> safeNodes;
        
        while(!q.empty()){
            int node = q.front();
            q.pop();
            safeNodes.push_back(node);
            for(auto child : adjRev[node]){
                indegree[child]--;
                if(indegree[child] == 0)
                    q.push(child);
            }
        }
        
        sort(safeNodes.begin(), safeNodes.end());
        return safeNodes;
    }
};

DFS....

class Solution {
    int V;
    bool chkDfs(int node, vector <int>& vis, vector <int>& path, vector<vector<int>>& adj){
    vis[node] = 1;
    path[node] = 1;
    
    for(auto child : adj[node]){
        if(!vis[child]){
            if(chkDfs(child, vis, path, adj) == true)
                    return true;
            }
            else if(path[child])
                return true;
        }
        
        path[node] = 0;
        return false;
    }
    
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        V = graph.size();
        vector <int> vis(V, 0);
        vector <int> path(V, 0);
        
        for(int i = 0; i < V; ++i){
            if(!vis[i]){
                chkDfs(i, vis, path, graph);
            }
        }
        vector <int> ans;
        for(int i = 0; i < V; ++i){
            if(!path[i])
                ans.push_back(i);
        }
        return ans;
    }
};
