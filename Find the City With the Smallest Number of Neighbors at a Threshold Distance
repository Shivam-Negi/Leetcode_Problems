class Solution {
public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {

        vector<vector<int>> dist(n, vector <int>(n, 1e9));   // cost matrix
        for(auto it : edges){
            int u = it[0];
            int v = it[1];
            int wt = it[2];
            dist[it[0]][it[1]] = wt;      // as it is Undirected Graph
            dist[it[1]][it[0]] = wt;
        }
        for(int i = 0; i < n; ++i){
            dist[i][i] = 0;                  
        }

        // Floyd Warshall algo
        for(int k = 0; k < n; ++k){
            for(int i = 0; i < n; ++i){
                for(int j = 0; j < n; ++j){
                    if(dist[i][k] == 1e9 || dist[k][j] == 1e9) //this check can be skipped
                        continue;                              //if INT_MAX not taken.
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
                }
            }
        }

        int city = -1;        // the city that will be the answer
        int cntCity = n;     // we will minimize this cnt

        for(int cty = 0; cty < n; ++cty){
            int tempct= 0;
            for(int adjcty = 0; adjcty < n; ++adjcty){
                if(dist[cty][adjcty] <= distanceThreshold)
                    ++tempct;
            }
            if(tempct <= cntCity){
                cntCity = tempct;
                city = cty;
            }
        }
        return city;
    }
};


// Dijkstra's Algo

int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        vector <pair<int, int>> g[n];            // node, wt
        for(auto it : edges){
            int u = it[0];
            int v = it[1];
            int wt = it[2];
            g[u].push_back({v, wt});
            g[v].push_back({u, wt});
        }
        int city = -1;
        int cityCnt = n;
        for(int i = 0; i < n; ++i){
            vector <int> dist(n, 1e9), vis(n, 0);
            set <pair<int, int>> s;
            s.insert({0, i});              //  wt, node
            dist[i] = 0;
            while(s.size() > 0){
                auto it = *s.begin();
                int node = it.second;
                int wt = it.first;
                s.erase(s.begin());
                
                if(vis[node])
                    continue;
                
                vis[node] = 1;

                for(auto child : g[node]){
                    int child_node = child.first;
                    int child_dist = child.second;
                    if(wt + child_dist < dist[child_node]){
                        dist[child_node] = wt + child_dist;
                        s.insert({dist[child_node], child_node});
                    }
                }
            }
            int tempCt = 0;
            for(int j = 0; j < n; ++j){
                if(dist[j] <= distanceThreshold)
                    ++tempCt;
            }
            if(tempCt <= cityCnt){
                city = i;
                cityCnt = tempCt;
            }
        }
        return city;
    }
