class Solution {
public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {

        vector<vector<int>> dist(n, vector <int>(n, 1e9));   // cost matrix
        for(auto it : edges){
            int u = it[0];
            int v = it[1];
            int wt = it[2];
            dist[it[0]][it[1]] = wt;      // as it is Undirected Graph
            dist[it[1]][it[0]] = wt;
        }
        for(int i = 0; i < n; ++i){
            dist[i][i] = 0;                  
        }

        // Floyd Warshall algo
        for(int k = 0; k < n; ++k){
            for(int i = 0; i < n; ++i){
                for(int j = 0; j < n; ++j){
                    if(dist[i][k] == 1e9 || dist[k][j] == 1e9) //this check can be skipped
                        continue;                              //if INT_MAX not taken.
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
                }
            }
        }

        int city = -1;        // the city that will be the answer
        int cntCity = n;     // we will minimize this cnt

        for(int cty = 0; cty < n; ++cty){
            int tempct= 0;
            for(int adjcty = 0; adjcty < n; ++adjcty){
                if(dist[cty][adjcty] <= distanceThreshold)
                    ++tempct;
            }
            if(tempct <= cntCity){
                cntCity = tempct;
                city = cty;
            }
        }
        return city;
    }
};
