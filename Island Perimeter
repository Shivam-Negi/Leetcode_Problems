DFS approach...........

class Solution {
public:
    int per = 0;
    
    void dfs(int i, int j, vector<vector<int>>& grid) {
        
    int m = grid.size();
    int n = grid[0].size();

    if(i < 0 || j < 0) return;
    if(i >= m || j >= n) return;
    if(grid[i][j] != 1) return;

    grid[i][j] = -1;
        
    per += (j + 1 >= grid[0].size() || grid[i][j+1] == 0) /* right */ 
            + (i - 1 < 0            || grid[i-1][j] == 0) /* top */ 
            + (j - 1 < 0            || grid[i][j-1] == 0) /* left */ 
            + (i + 1 >= grid.size()    || grid[i+1][j] == 0); /* bottom */

    dfs(i-1, j, grid);
    dfs(i+1, j, grid);
    dfs(i, j-1, grid);
    dfs(i, j+1, grid);
        
}
    
    int islandPerimeter(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();       // m  x  n   grid
        
        for(int i = 0; i<m; ++i){
            for(int j = 0; j<n; ++j){
                if(grid[i][j] == 1){
                    dfs(i, j, grid);
                    return per;
                }
            }
        }
        return per;
    }
};



Simple iteration check......

class Solution {
public:
    int islandPerimeter(vector<vector<int>>& grid) {
        int res = 0;
        int r = grid.size();
        int c = grid[0].size();
        
        for(int i=0; i<r; i++)
        {
            for(int j=0; j<c; j++)
            {
                if(grid[i][j] == 1)
                {
                    res += (i == 0 || grid[i-1][j] == 0)
                           + (i == r-1 || grid[i+1][j] == 0)
                           + (j == 0 || grid[i][j-1] == 0)
                           + (j == c-1 || grid[i][j+1] == 0);
                }
            }
        }
        
        return res;
    }
};
