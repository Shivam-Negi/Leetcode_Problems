Using dfs...

class Solution {
    int n;
public:
    
    void dfs(int vertex, vector<int> g[], vector <int> &vis){
        vis[vertex] = true;
        for(int child : g[vertex]){
            if(vis[child])
                continue;
            
            dfs(child, g, vis);
        }
    }
    
    int findCircleNum(vector<vector<int>>& isConnected) {
        
        n = isConnected.size();
        vector <int> g[n+1];
        vector<int> vis(n+1, 0);
        
        for(int i = 0; i < n; ++i){
            for(int j = 0; j < n; ++j){
                if(isConnected[i][j] == 1  &&  i != j){
                    g[i+1].push_back(j+1);
                }
            }
        }
        
        int ct = 0;
        for(int i = 1; i <= n; ++i){
            if(vis[i]) continue;
            dfs(i, g, vis);
            ++ct;
        }
        return ct;
    }
};
