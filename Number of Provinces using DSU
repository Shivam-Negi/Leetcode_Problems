class DisjointSet {
public:
    vector <int> size, parent;
	DisjointSet(int n){
		size.resize(n+1, 1);
		parent.resize(n+1);
		for(int i = 1; i <= n; ++i){
			parent[i] = i;
		}
	}

	int find_U_par(int node){
		if(node == parent[node])
			return node;

		return parent[node] = find_U_par(parent[node]);
	}

	void unionBySize(int u, int v){
		int ulp_u = find_U_par(u);    // ultimate parent finding
		int ulp_v = find_U_par(v);

		if(ulp_u == ulp_v)     // already connected
			return;

		if(size[ulp_u] < size[ulp_v]){
			parent[ulp_u] = ulp_v;
			size[ulp_v] += size[ulp_u];
		}
		else{
			parent[ulp_v] = ulp_u;
			size[ulp_u] += size[ulp_v];
		}
	}
};

class Solution {
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int V = isConnected.size();
        DisjointSet ds(V);
        for(int i = 0; i < V; ++i){
            for(int j = 0; j < V; ++j){
                if(isConnected[i][j] == 1)
                    ds.unionBySize(i+1, j+1);
            }
        }

        int ct = 0;
        for(int i = 1; i <= V; ++i){
            if(ds.parent[i] == i)
            ++ct;
        }
        return ct;
    }
};
