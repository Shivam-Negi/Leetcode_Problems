class Solution {
    private:
    bool equal(int a[26], int b[26]){
        for(int i = 0; i<26; ++i){
            if(a[i] != b[i])
                return false;
        }
        return true;
    }
public:
    bool checkInclusion(string s1, string s2) {
        int ct1[26] = {0};
        for(int i = 0; i<s1.length(); ++i){
            int z = s1[i] - 'a';
            ct1[z]++;
        }
        
        int ct2[26] = {0};
        int s = 0;
        int window = s1.length();
        while( s < s2.length() && s < window){
            int x = s2[s] - 'a';
            ct2[x]++;
            ++s;
        }
        if(equal( ct1 , ct2 ))
            return true;
        
        while(s < s2.length()){
            char newChar = s2[s];
            int y = s2[s] - 'a';
            ct2[y]++;
            
            char oldChar = s2[s - window];
            y = oldChar - 'a';
            ct2[y]--;
            
            ++s;
            
            if(equal( ct1 , ct2 ))
                return true;
        }
        return false;
    }
};



OR

class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        if (s1.size() > s2.size()) 
            return false;
        
        vector<int> s1v (26, 0);
        for (auto c : s1) 
            s1v[c - 'a']++;
        
        vector<int> s2v (26, 0);
        int l = 0, r = 0;
        
        while (r < s2.size()) {
            s2v[s2[r]-'a']++;
            if (r - l + 1 == s1.size()){
                if (s1v == s2v)
                    return true;
            }
            
            if (r - l + 1 < s1.size())
                r++;
            
            else {
                s2v[s2[l]-'a']--;
                l++;
                r++;
            }
        }
        return false;
    }
};
