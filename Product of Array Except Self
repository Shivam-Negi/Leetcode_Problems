SPACE OPTIMISED APPROACH........


class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector <int> pre(n, 1);
        for(int i = 1; i < n; ++i){    
            pre[i] = pre[i - 1] * nums[i - 1];   // stores products of left elements.
        }
        int suff = 1;              // updates the products of right elements.
        for(int i = n - 1; i >= 0; --i){
            pre[i] = pre[i] * suff;
            suff *= nums[i];
        }
        return pre;
    }
};



EXTRA SPACE approach....

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector <int> ans(n, 1), pre(n, 1), suf(n, 1);
        for(int i = 1; i < n; ++i){
            pre[i] = pre[i - 1] * nums[i - 1];
        }
        for(int i = n - 2; i >= 0; --i){
            suf[i] = suf[i + 1] * nums[i + 1];
        }
        for(int i = 0; i < n; ++i){
            ans[i] = pre[i] * suf[i];
        }
        return ans;
    }
};
