BITMASKING Approach:

class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        int n = nums.size();
	int subset_ct = (1 << n);
    vector <vector<int> > subsets;
    for( int mask = 0; mask<subset_ct; ++mask){
    	vector<int>subset;
    	for(int i = 0; i<n; ++i){
    		if((mask & (1<<i)) != 0){
    			subset.push_back(nums[i]);
    		}
    	}
    	subsets.push_back(subset);
    }
    return subsets;
    }
};



OR



class Solution {
void solve(vector<int> nums, vector <int> &subset, int index, vector <vector<int> > &res){
        
        // base case
        if(index >= nums.size()){
            res.push_back(subset);
            return;
        }
        // exclude
        solve(nums, subset, index + 1, res);
        
        // include
        int elem = nums[index];
        subset.push_back(elem);
        solve(nums, subset, index + 1, res);
        subset.pop_back();       
    }
    
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector <vector<int> > res;
        vector <int> subset;
        int index = 0;
        solve(nums, subset, index, res);
        return res;
    }
};
