class Solution {
    int m, n;
    
    void dfs(int i, int j, vector <vector<int>>& vis, 
                vector<vector<char>>& board) {
        
        if(i < 0 || j < 0) return;
        if(i >= m || j >= n) return;
        if(board[i][j] == 'X') return;
        if(vis[i][j] == 1) return;
        
        vis[i][j] = 1;
        
        dfs(i-1, j, vis, board);
        dfs(i+1, j, vis, board);
        dfs(i, j-1, vis, board);
        dfs(i, j+1, vis, board);
    }
public:
    void solve(vector<vector<char>>& board) {
        m = board.size();
        n = board[0].size();
        vector <vector<int>> vis(m, vector<int>(n, 0));
        
        // first row and last row
        for(int j = 0; j < n; ++j){
            if(!vis[0][j] && board[0][j] == 'O')
                dfs(0, j, vis, board);
            
            if(!vis[m-1][j] && board[m-1][j] == 'O')
                dfs(m-1, j, vis, board);
        }
        // first col and last col
        for(int i = 0; i < m; ++i){
            if(!vis[i][0] && board[i][0] == 'O')
                dfs(i, 0, vis, board);
            
            if(!vis[i][n-1] && board[i][n-1] == 'O')
                dfs(i, n-1, vis, board);
        }
        
        for(int i = 0; i < m; ++i){
            for(int j = 0; j < n; ++j){
                if(!vis[i][j] && board[i][j] == 'O')
                    board[i][j] = 'X';
            }
        }
    }
};
