class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        
        unordered_set <string> s(wordList.begin(), wordList.end());
        queue <pair<string, int>> q;
        // string for storing word and int for storing its level....
        q.push({beginWord, 1});
        s.erase(beginWord);
        
        while(!q.empty()){
            auto it = q.front();
            string word = it.first;
            int steps = it.second;
            q.pop();
            
            if(word == endWord)
                return steps;
                
            for(int i = 0; i < word.size(); ++i){
                char original = word[i];
                for(char ch = 'a'; ch <= 'z'; ++ch){
                    word[i] = ch;
                    if(s.find(word) != s.end()){
                        q.push({word, steps + 1});
                        s.erase(word);
                    }
                }
                word[i] = original;
            }
        }
        return 0;
    }
};
